#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>

//int main()
//{
	//int a = 0;
	//printf("%d\n", ~a);//  ~ 表示按位取反 所有位都取反 包括符号位
	//整数在内存中存储的是补码
	// 对于负整数的写法如下
	//-1
	//10000000000000000000000000000001（原码）
	//11111111111111111111111111111110（反码）
	//11111111111111111111111111111111（补码）
	//第一位为符号位 不变 1代表负
	//正整数的原码补码反码相同
	//return 0;
//}

//int main()
//{
//	int a = 10;
//	//int b = ++a;//前置++——先++后使用 a变为了11
//	int b = a++;//后置++——先使用再++ a依旧为10
//	printf("%d\n", b);//b为11
//	printf("%d\n", a);//a也为11
//	return 0;
//}

//强制类型转换
//int main()
//{
//	int a = (int)3.14;// ()里面放类型 强制类型转换
//	printf("%d\n", a);
//	return 0;
//}

//关系操作符
//int main()
//{
	//int a = 3;
	//int b = 5;
	//int b = 0;
	//int c = a || b;


	//printf("%d\n", c);
	//int a = 3;
	//int b = 5;
	//int b = 0;
	//int c = a && b;
	//printf("%d\n", c);

	//return 0;
//}


//条件操作符（三目操作符）
//exp1?epx2:exp3
//exp1成立，exp2计算，整个表达式的结构是：exp2的结果
//exp1不成立，exp3计算，整个表达式的结构是：exp3的结果

//int main()
//{
//	int a = 0;
//	int b = 3;
//	int max = 0;
	//if (a > b)
	//{
	//	max = a;
	//}
	//else
	//{
	//	max = b;
	//}

	//max = a > b ? a : b;//将上述步骤用条件操作符表示出来
	//printf("%d\n", max);
	//return 0;
//}

//逗号表达式
//exp1,exp2,exp3....expN
//逗号隔开的一串表达式

//int main()
//{
//	//{2, 4 + 5, 6};
//	int a = 0;
//	int b = 3;
//	int c = 5;
//	int d = (a = b + 2, c = a - 4, b = c + 2);
//	//逗号表达式 从左到右以此计算
//	//整个逗号表达式的结果是最后一个表达式的结果
//	return 0;
//}

//下标引用操作符
//int main()
//{
//	int arr[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
//	printf("%d\n", arr[5]);//期中的[]就为下标引用操作符
//	return 0;
//}

//int main()
//{
//	//调用函数时，函数名后面的（）就时函数调用操作符
//	printf("hello\n");
//	return 0;
//}


//C语言中的关键字
//变量名不能是关键字
//auto:自动的   auto int a=10  自动创建 自动销毁——自动变量
//auto 在写的时候 省略掉了

//extern 用来申明外部符号
//register 寄存器关键字 起建议作用
//int main()
//{
//	register int num = 100;//建议num的值放在寄存器里面去
//	return 0;
//}

//signed ：有符号的数字 10 -20
//unsigned: 无符号的数字

//static 静态的
//union 联合体（共用体）
//void 无-空

//define 和 include不是关键字  它们是预处理指令

//typedef:类型重定义
//typedef unsigned int u_int;
//int main()
//{
//	unsigned int num = 100;
//	u_int num = 100;//这两条指令相同
//	return 0;
//}

//static
//1.static 修饰局部变量
//2.static 修饰全局变量
//3.static 修饰函数
void test()
{
	int a = 1;
	a++;
	printf("%d ", a);
}
int main()
{
	int i = 0;
	while (i < 10)
	{
		test();
		i++;
	}
	return 0;
}
