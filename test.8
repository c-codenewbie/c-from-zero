#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>

//接上一次的 static三种用法
//void test()
//{
//	static int a = 1;//若不加static 则运行后出现的是10个2
//	a++;
//	printf("%d ", a);
//
//}
//static 使得a的值在结尾没有销毁
//static 修饰局部变量，改变了局部变量的生命周期（本质上是改变了变量的存储类型）

//存储的区域：  栈区：局部变量；函数的参数
//              堆区： 动态内存分配
//              静态区：全局变量；static修饰的静态变量
//int main()
//{
//	int i = 0;
//	while (i<10)
//	{
//		test();
//		i++;
//	}
//	return 0;
//}

//声名外部符号
//extern int g_val;//若用static修饰全局变量后 使得全局变量 只能在自己所在的源文件内部可以使用 其他源文件 不能使用
//全局变量，在其他源文件内被使用，是因为全局变量具有外部链接属性
//但是被static修饰以后就变成了内部链接属性，其他源文件不能链接到这个静态的全局变量了
//int main()
//{
//	printf("%d", g_val);
//	return 0;
//}

//声名函数
//extern Add(int, int);
//函数被static修饰时 在其他源文件中也不能使用 
//和static修饰全局变量的作用一样
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int sum = add(a, b);
//	printf("%d", sum);
//	return 0;
//}

//#define定义常量和宏
//define 预处理指令
//1.定义符号
//#define MAX 10000
//int main()
//{
//	printf("%d", MAX);
//	return 0;
//}

//2.定义常量

//3.定义宏
//#define ADD(X,Y) ((X)+(Y))//用括号将X Y括起来 才能进行乘法运算
//否则下列的4*ADD（2.3） 会被识别为 4*2+3 得到的为11 
//int main()
//{
//	printf("%d\n", ADD(2, 3));
//	printf("%d", 4 * ADD(2, 3));
//	return 0;
//		  
//}
