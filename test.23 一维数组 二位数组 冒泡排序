#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
//一维数组
//一维数组的使用 []--下标引用操作符

//int main()
//{
//	int arr[10] = { 0 };
//	arr[4] = 5;
//	int i = 0;
//	printf("%d\n", sizeof(arr));
//	printf("%d\n", sizeof(arr[0]));
//	printf("--------------\n");
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	return 0;
//}

//%p--按地址的格式打印 - 十六进制的打印
//int main()
//{
//	//printf("%x\n", 0x12);
//	//printf("%p\n", 0x12);
//	int arr[10] = { 0 };
//	int i = 0;
//	for (i = 0; i < 10; i++)
//	{
//		printf("&arr[%d] = %p\n",i, &arr[i]);
//	}
//	return 0;
//}
//一维数组在内存中是连续存放的
//随着数组下标的增长 地址由低到高变化

//int main()
//{
//
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int* p = arr;
//	int i = 0;
//	for (i = 0; i < 10; i++)
//	{
//		printf("%d ",*p);
//		p++;
//	}
//	return 0;
//}

//二维数组
//int main()
//{
//创建
//  int arr[3][4]
//  char ch[2][10]
//初始化-创建的同时给赋值
//  int arr[3][4] = { 1,2,3,4,5,6,7,8,9,10,11,12 };
//  int arr[3][4] = { 1,2,3,4,5,6,7 };//不完全初始化-后面补0
//  int arr[3][4] = { {1,2},{3,4},{4,5} };
//	int arr[][4] = { {1,2},{3,4},{4,5} };//行可以省略
//	int i = 0, j = 0;
//	for (i = 0; i < 3; i++)
//	{
//		for (j = 0; j < 4; j++)
//		{
//			printf("%d ",arr[i][j]);
//		}
//		printf("\n");
//	}
//
//	return 0;
//}

//二位数组在内存中的存储
//int main()
//{
//	int arr[][4] = { {1,2},{3,4},{4,5} };//行可以省略
//	int i = 0, j = 0;
//	for (i = 0; i < 3; i++)
//	{
//		for (j = 0; j < 4; j++)
//		{
//			printf("arr[%d][%d] = %p\n ",i,j, &arr[i][j]);
//		}
//	}
//	return 0;
//}
//说明 二位数组在内存中也是连续存放的
//int main()
//{
//	int arr[][4] = { {1,2},{3,4},{4,5} };//行可以省略
//	int i = 0, j = 0;
//	int* p = &arr[0][0];
//	for (i = 0; i < 12; i++)
//	{
//		printf("%d ",*p );
//		p++;
//	}
//	return 0;
//}


//数组作为函数参数
#include <string.h>
void bubble_sort(int arr[],int sz)
{
	//确定进行多少趟排序
	int i = 0;
	for (i = 0; i < sz - 1;i++)
	{
		//一趟冒泡排序的过程
		int j = 0;
		for (j = 0; j < sz-1-i; j++)
		{
			if (arr[j] > arr[j + 1])
			{
				//交换
				int tmp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = tmp;

			}
		}
	}

}
int main()
{
	
	int arr[] = { 9,8,7,6,5,4,3,2,1,0 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	//排序为升序，冒泡排序
	bubble_sort(arr,sz);
	//冒泡排序的思想：两两相邻的元素进行比较，并且可能的话需要交换

    int* p = arr;
    int i = 0;
	for (i = 0; i < 10; i++)
	{
		printf("%d ",*p);
		p++;
	}

	return 0;
}

//数组名是数组首元素地址 例arr
//有两个例外 1.sizeof(数组名) -数组名表示整个数组-计算的是整个数组的大小 单位是字节
//           2.&数组名-数组名表示整个数组-取出的是整个数组的地址
//
