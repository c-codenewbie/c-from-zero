#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
//int main()
//{
//	int i = 0;
//	for (i = 0; i < 10; i++)
//	{
//		if (i = 5)//注意细节 此处的为赋值 无论进来的为何值都会被赋值为5 打印出来 故会进入死循环
//			printf("%d", i);
//	}
//	return 0;
//}

//int func(int a)
//{
//	int b;
//	switch (a)
//	{
//	case 1:b = 30;
//	case 2:b = 20;
//	case 3:b = 16;
//	default:b = 0;
//	}
//	return b;
//}

//func(1)是多少( 0 )
//验证
//int main()
//{
//	printf("%d\n", func(1));
//	return 0;
//}

//F11—逐语句
//F10—逐过程

//int main()
//{
//	int x = 3;
//	int y = 3;
//	switch (x % 2)
//	{
//	case 1:
//		switch (y)
//		{
//		case 0:
//			printf("first");
//		case 1:
//			printf("second");
//			break;
//		default:printf("hello");
//		}
//	case 2:
//		printf("third");
//	}
//	return 0;
//}

//写出代码 将三个整数从大到小输出
//int main()
//{
//	int a = 0;
//	int b = 0;
//	int c = 0;
//	//输入
//	scanf("%d%d%d", &a, &b, &c);
//	//调整
//	if (a < b)
//	{
//		int tmp = a;
//		a = b;
//		b = tmp;
//	}
//	if (a < c)
//	{
//		int tmp = a;
//		a = c;
//		c = tmp;
//	}
//	if (b < c)
//	{
//		int tmp = b;
//		b = c;
//		c = tmp;
//	}
//	//输出 从大到小
//	printf("%d %d %d", a, b, c);
//
//	return 0;
//}
//后期可简化

//打印1—100之间3的倍数
//int main()
//{
//	int i = 0;
//	for (i = 1; i <= 100; i++)
//	{
//		if (i % 3 == 0)
//			printf("%d ", i);
//	}
//	return 0;
//}

//打印1—100之间3的倍数
//int main()
//{
//	int i = 0;
//	for (i = 3; i <= 100; i+=3)
//	{
//			printf("%d ", i);
//	}
//	return 0;
//}

//给两个数 求两个数的最大公约数
//int main()
//{
//	int m = 0;
//	int n = 0;
//	int max = 0;//最大公约数
//	scanf("%d%d", &m, &n);
//	//假设m和n的最大公约数是m和n中的较小值
//	if (m > n)
//		max = n;
//	else
//		max = m;
//	while (1)
//	{
//		if (n % max == 0 && m % max == 0)
//		{
//			printf("最大公约数是%d\n", max);
//			break;
//		}
//		max--;
//	}
//	return 0;
//}


//辗转相除法
//int main()
//{
//	int m = 0;
//	int n = 0;
//	scanf("%d%d", &m, &n);
//	int t = 0;
//	//不需要判断谁大谁小
//	//比如 18/24  商为0 余数为18 然后进行数值交换 就能正常运算
//	while (t = m % n)
//	{
//		//t = m % n;
//		m = n;
//		n = t;
//	}
//	printf("最大公约数%d\n", n);
//
//	return 0;
//}

//打印1000到2000间的闰年
//int main()
//{
//	int year = 1000;
//	int count = 0;
//	for (year = 1000; year <= 2000; year++)
//	{
//		//判断是不是闰年
//		//1.能被4整除，不能被100整除
//		//2.能被400整除
//		if (year % 4 == 0 )
//		{
//			if (year % 100 != 0)
//			{
//				printf("%d ", year);
//				count++;
//			}
//		}
//		if (year % 400 == 0)
//		{
//			printf("%d ", year);
//			count++;
//		}
//	}
//	printf("\n闰年个数:%d\n", count);
//	return 0;
//}


//简化
//int main()
//{
//	int year = 1000;
//	int count = 0;
//	for (year = 1000; year <= 2000; year++)
//	{
//		//判断是不是闰年
//		//1.能被4整除，不能被100整除
//		//2.能被400整除
//		if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0))
//		{
//			printf("%d ", year);
//			count++;
//		}
//		
//	}
//	printf("\n闰年个数:%d\n", count);
//	return 0;
//}

//打印100—200之间的素数
//int main()
//{
//	int i = 0;
//	int n = 2;
//	for (i = 100; i <= 200; i++)
//	{
//		//判断是否为素数
//		for (n = 2; n < i ; n++)
//		{
//			if (i % n == 0)
//			{
//				break;
//			}
//		}
//		if (i == n)
//		{
//			printf("%d ", i);
//		}
//	}
//	return 0;
//}


//另一种理解
//int main()
//{
//	int i = 0;
//	int n = 2;
//	
//	for (i = 100; i <= 200; i++)
//	{
//		int flag = 1;//假设i就是素数 只有不进入break中的数字才是素数 此时的flag为1 不然为零 由此得出素数
//		//判断是否为素数
//		for (n = 2; n < i; n++)
//		{
//			if (i % n == 0)
//			{
//				flag = 0;
//				break;
//			}
//		}
//		if (flag == 1)
//		{
//			printf("%d ", i);
//		}
//	}
//	return 0;
//}


//优化 减少试算量
#include <math.h>
int main()
{
	int i = 0;
	int n = 2;
	//m =  a*b时
	//a和b中至少存在一个数字小于等于 m开平方的数字
	//for (i = 100; i <= 200; i++)
	for (i = 100; i <= 200; i+=2)//再优化 去掉所有的偶数
	{
		int flag = 1;
		//判断是否为素数
		for (n = 2; n <= sqrt(i); n++)
		{
			if (i % n == 0)
			{
				flag = 0;
				break;
			}
		}
		if (flag == 1)
		{
			printf("%d ", i);
		}
	}
	return 0;
}
