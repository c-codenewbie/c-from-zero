//实际参数  可以是常量 变量 表达式 函数
//借用上面取得最大值的程序中的一条语句
//	int max = get_max(a, b);
//可以写成 	int max = get_max(2, 3);
//          int max = get_max(2+5, 3);
//          int max = get_max(2+5, get_max(4,7));

//形式参数  函数名后括号中的变量
//形式参数当函数调用完成之后就自动销毁了 因此形式参数只在函数中有效


//函数调用

//练习

//打印100-200之间的素数 新写法
//int is_prime(int n)
//{
//	int j = 0;
//	for (j = 2; j < n; j++)
////  for(j = 2; j < sqrt(n);j++) //优化 上一次写到过
//	{
//		if (n % j == 0)
//		{
//			return 0;
//		}
//	}
//	return 1;
//}
//int main()
//{
//	int count = 0;
//	int i = 0;
//	for (i = 100; i <= 200; i++)
//	{
//		if (is_prime(i) == 1)
//		{
//			count++;
//			printf("%d ", i);
//		}
//	}
//	printf("\ncount = %d",count);
//	return 0;
//}

//1.判断是不是闰年1000-2000
//int is_leap_year(int n)
//{
//	if ((n % 4 == 0) && (n % 100 != 0) || (n % 400 == 0))
//	{
//		return 1;
//	}
//	else
//	{
//		return 0;
//	}
//}

////简化
////int is_leap_year(int n)
////{
////	return ((n % 4 == 0) && (n % 100 != 0) || (n % 400 == 0));
////}
//int main()
//{
//	int count = 0;
//	int y = 0;
//	for (y = 1000; y <= 2000; y++)
//	{
//		if (is_leap_year(y) == 1)
//		{
//			count++;
//			printf("%d ", y);
//		}
//	}
//	printf("\n闰年个数:%d", count);
//	return 0;
//}

//2.实现整形有序数列的二分查找
//int binary_search(int a[], int k, int s)
//{
//	int left = 0;
//	int right = s - 1;
//	
//	while (left <= right)
//	{
//		int mid = (left + right) / 2;
//		if (a[mid] > k)
//		{
//			right = mid - 1;
//		}
//		else if (a[mid] < k)
//		{
//			left = mid + 1;
//		}
//		else
//		{
//			return mid;
//		}
//	}
//	return - 1;
//}
//int main()
//{
//	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
//	int key = 7;
//	int sz = sizeof(arr) / sizeof(arr[0]); //数组个数 不能再创建的函数中计算 原因如下的
//  //数组传参，实际传递的不是数组的本身
//  //仅仅传过去了数组首元素的地址
// 
//  //找到了就返回找到的下标
//	//找不到就返回-1
//	int ret = binary_search(arr,key,sz);
//	if (-1 == ret)
//	{
//		printf("找不到");
//	}
//	else
//	{
//		printf("找到了，下标是:%d\n", ret);
//	}
//	return 0;
//}

//3.写一个函数，每调用一次这个函数，num的值+1
void add(int* p)
{
	(*p)++;
}
int main()
{
	int num = 0;
	add(&num);
	printf("%d\n", num);

	add(&num);
	printf("%d\n", num);

	add(&num);
	printf("%d\n", num);
	return 0;
}
